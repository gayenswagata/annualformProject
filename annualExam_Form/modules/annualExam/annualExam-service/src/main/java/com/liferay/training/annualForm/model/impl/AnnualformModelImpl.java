/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.training.annualForm.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;
import com.liferay.training.annualForm.model.Annualform;
import com.liferay.training.annualForm.model.AnnualformModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Annualform service. Represents a row in the &quot;annualform&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>AnnualformModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AnnualformImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see AnnualformImpl
 * @generated
 */
@JSON(strict = true)
public class AnnualformModelImpl
	extends BaseModelImpl<Annualform> implements AnnualformModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a annualform model instance should use the <code>Annualform</code> interface instead.
	 */
	public static final String TABLE_NAME = "annualform";

	public static final Object[][] TABLE_COLUMNS = {
		{"annualformId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"firstName", Types.VARCHAR},
		{"lastName", Types.VARCHAR}, {"about", Types.VARCHAR},
		{"gender", Types.VARCHAR}, {"country", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("annualformId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("firstName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("lastName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("about", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("gender", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("country", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table annualform (annualformId LONG not null primary key,groupId LONG,userId LONG,firstName VARCHAR(75) null,lastName VARCHAR(75) null,about VARCHAR(75) null,gender VARCHAR(75) null,country VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table annualform";

	public static final String ORDER_BY_JPQL =
		" ORDER BY annualform.userId ASC";

	public static final String ORDER_BY_SQL = " ORDER BY annualform.userId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long USERID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public AnnualformModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _annualformId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setAnnualformId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _annualformId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Annualform.class;
	}

	@Override
	public String getModelClassName() {
		return Annualform.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Annualform, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Annualform, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Annualform, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Annualform)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Annualform, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Annualform, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Annualform)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Annualform, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Annualform, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<Annualform, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Annualform, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Annualform, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Annualform, Object>>();
		Map<String, BiConsumer<Annualform, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Annualform, ?>>();

		attributeGetterFunctions.put(
			"annualformId", Annualform::getAnnualformId);
		attributeSetterBiConsumers.put(
			"annualformId",
			(BiConsumer<Annualform, Long>)Annualform::setAnnualformId);
		attributeGetterFunctions.put("groupId", Annualform::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId", (BiConsumer<Annualform, Long>)Annualform::setGroupId);
		attributeGetterFunctions.put("userId", Annualform::getUserId);
		attributeSetterBiConsumers.put(
			"userId", (BiConsumer<Annualform, Long>)Annualform::setUserId);
		attributeGetterFunctions.put("firstName", Annualform::getFirstName);
		attributeSetterBiConsumers.put(
			"firstName",
			(BiConsumer<Annualform, String>)Annualform::setFirstName);
		attributeGetterFunctions.put("lastName", Annualform::getLastName);
		attributeSetterBiConsumers.put(
			"lastName",
			(BiConsumer<Annualform, String>)Annualform::setLastName);
		attributeGetterFunctions.put("about", Annualform::getAbout);
		attributeSetterBiConsumers.put(
			"about", (BiConsumer<Annualform, String>)Annualform::setAbout);
		attributeGetterFunctions.put("gender", Annualform::getGender);
		attributeSetterBiConsumers.put(
			"gender", (BiConsumer<Annualform, String>)Annualform::setGender);
		attributeGetterFunctions.put("country", Annualform::getCountry);
		attributeSetterBiConsumers.put(
			"country", (BiConsumer<Annualform, String>)Annualform::setCountry);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getAnnualformId() {
		return _annualformId;
	}

	@Override
	public void setAnnualformId(long annualformId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_annualformId = annualformId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getFirstName() {
		if (_firstName == null) {
			return "";
		}
		else {
			return _firstName;
		}
	}

	@Override
	public void setFirstName(String firstName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_firstName = firstName;
	}

	@JSON
	@Override
	public String getLastName() {
		if (_lastName == null) {
			return "";
		}
		else {
			return _lastName;
		}
	}

	@Override
	public void setLastName(String lastName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_lastName = lastName;
	}

	@JSON
	@Override
	public String getAbout() {
		if (_about == null) {
			return "";
		}
		else {
			return _about;
		}
	}

	@Override
	public void setAbout(String about) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_about = about;
	}

	@JSON
	@Override
	public String getGender() {
		if (_gender == null) {
			return "";
		}
		else {
			return _gender;
		}
	}

	@Override
	public void setGender(String gender) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_gender = gender;
	}

	@JSON
	@Override
	public String getCountry() {
		if (_country == null) {
			return "";
		}
		else {
			return _country;
		}
	}

	@Override
	public void setCountry(String country) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_country = country;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, Annualform.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Annualform toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Annualform>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AnnualformImpl annualformImpl = new AnnualformImpl();

		annualformImpl.setAnnualformId(getAnnualformId());
		annualformImpl.setGroupId(getGroupId());
		annualformImpl.setUserId(getUserId());
		annualformImpl.setFirstName(getFirstName());
		annualformImpl.setLastName(getLastName());
		annualformImpl.setAbout(getAbout());
		annualformImpl.setGender(getGender());
		annualformImpl.setCountry(getCountry());

		annualformImpl.resetOriginalValues();

		return annualformImpl;
	}

	@Override
	public Annualform cloneWithOriginalValues() {
		AnnualformImpl annualformImpl = new AnnualformImpl();

		annualformImpl.setAnnualformId(
			this.<Long>getColumnOriginalValue("annualformId"));
		annualformImpl.setGroupId(this.<Long>getColumnOriginalValue("groupId"));
		annualformImpl.setUserId(this.<Long>getColumnOriginalValue("userId"));
		annualformImpl.setFirstName(
			this.<String>getColumnOriginalValue("firstName"));
		annualformImpl.setLastName(
			this.<String>getColumnOriginalValue("lastName"));
		annualformImpl.setAbout(this.<String>getColumnOriginalValue("about"));
		annualformImpl.setGender(this.<String>getColumnOriginalValue("gender"));
		annualformImpl.setCountry(
			this.<String>getColumnOriginalValue("country"));

		return annualformImpl;
	}

	@Override
	public int compareTo(Annualform annualform) {
		int value = 0;

		if (getUserId() < annualform.getUserId()) {
			value = -1;
		}
		else if (getUserId() > annualform.getUserId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Annualform)) {
			return false;
		}

		Annualform annualform = (Annualform)object;

		long primaryKey = annualform.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Annualform> toCacheModel() {
		AnnualformCacheModel annualformCacheModel = new AnnualformCacheModel();

		annualformCacheModel.annualformId = getAnnualformId();

		annualformCacheModel.groupId = getGroupId();

		annualformCacheModel.userId = getUserId();

		annualformCacheModel.firstName = getFirstName();

		String firstName = annualformCacheModel.firstName;

		if ((firstName != null) && (firstName.length() == 0)) {
			annualformCacheModel.firstName = null;
		}

		annualformCacheModel.lastName = getLastName();

		String lastName = annualformCacheModel.lastName;

		if ((lastName != null) && (lastName.length() == 0)) {
			annualformCacheModel.lastName = null;
		}

		annualformCacheModel.about = getAbout();

		String about = annualformCacheModel.about;

		if ((about != null) && (about.length() == 0)) {
			annualformCacheModel.about = null;
		}

		annualformCacheModel.gender = getGender();

		String gender = annualformCacheModel.gender;

		if ((gender != null) && (gender.length() == 0)) {
			annualformCacheModel.gender = null;
		}

		annualformCacheModel.country = getCountry();

		String country = annualformCacheModel.country;

		if ((country != null) && (country.length() == 0)) {
			annualformCacheModel.country = null;
		}

		return annualformCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Annualform, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Annualform, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Annualform, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((Annualform)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Annualform>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					Annualform.class, ModelWrapper.class);

	}

	private long _annualformId;
	private long _groupId;
	private long _userId;
	private String _firstName;
	private String _lastName;
	private String _about;
	private String _gender;
	private String _country;

	public <T> T getColumnValue(String columnName) {
		Function<Annualform, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Annualform)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("annualformId", _annualformId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("firstName", _firstName);
		_columnOriginalValues.put("lastName", _lastName);
		_columnOriginalValues.put("about", _about);
		_columnOriginalValues.put("gender", _gender);
		_columnOriginalValues.put("country", _country);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("annualformId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("userId", 4L);

		columnBitmasks.put("firstName", 8L);

		columnBitmasks.put("lastName", 16L);

		columnBitmasks.put("about", 32L);

		columnBitmasks.put("gender", 64L);

		columnBitmasks.put("country", 128L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Annualform _escapedModel;

}